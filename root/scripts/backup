#!/bin/bash
if [ -n "${DEBUG}" ]; then set -ex; fi;

usageStr="Usage: (ba)sh $0 <filters: categories, or reponames>";

repoDir="${CGIT_REPODIR:-/home/git/repositories}"; # repositories root dir
archiveDir="${CGIT_ARCHIVEDIR:-$CGIT_REPODIR/.archived}"; # archive dir (must exist)
repoTracker="${CGIT_BACKUP_LIST:-/tmp/backup_list_of_repos}"; # list of repos to backup, generated before each run
maxDepth="${CGIT_REPOS_MAXDEPTH:-3}"; # maximum depth to search for repositories to restore

filter="$1"; # filter repos in directories, or by name

fmtdt    (){    date +"%Y-%m-%dT%H:%M:%S%:z";         } # date format
eecho    (){>&2 echo "[$(fmtdt)] $@";                 } # echo error
iecho    (){    echo "[$(fmtdt)] $@";                 } # echo info

totalRepos=0;   # total repos to restore
needleRepo=0;   # index of repo currently being processed
skippedRepos=0; # count of skipped repos
doneRepos=0;    # count of backed-up repos
failedRepos=0;  # count of failed repos

onExit () {
    local xc=$?;
    trap - EXIT;
    # clean up
    if [ -f "${repoTracker}" ]; then rm -f "${repoTracker}" && iecho "Removed file: ${repoTracker}"; fi;
    iecho "$0 exited with code ${xc}";
}
trap onExit EXIT HUP INT QUIT PIPE TERM;

runBackup () {
    mkdir -p "$repoDir" "$archiveDir"; # ensure dirs exist

    # gather repo directories in ${repoTracker}
    # find
    #   all directories till maxdepth
    #   ignore backup files
    #   filter non-empty dirs ending in '.git' which actually contain subdirs (like branches/hooks/info/objects/refs etc)
    #   filter with $filter
    #   remove subdirs (creates duplicate paths)
    #   sort / uniq
    find "${repoDir}" -maxdepth ${maxDepth} -type d 2> /dev/null \
        | grep -v '\.git.tar.gz' \
        | grep -e '\.git\/' \
        | grep -e "${filter:=./}" \
        | sed  -e 's_/[^/]*$__' \
        | sort -u \
        > ${repoTracker};
    totalRepos="$(cat ${repoTracker} | wc -l)";

    if [[ ${totalRepos} -eq 0 ]]; then eecho "Nothing to backup"; exit 1; fi;

    # backup each repo in respective category folder inside $archiveDir/
    for line in `cat ${repoTracker}`;
    do
        local repo="${line}";
        local bfile="${archiveDir}/${repo##${repoDir}/}.tar.gz"; # backup destination tar file
        local bdir="$(dirname $bfile)"; # backup parent dir, may contain category
        local cdir="$(dirname ${repo})"; # repo parent dir, may contain category

        ((needleRepo++));
        iecho "REPO ${needleRepo}/${totalRepos} Fail:${failedRepos} Ok:${doneRepos} Skip:${skippedRepos}";
        iecho "PATH ${repo##${repoDir}/}";
        iecho "FILE ${bfile##${repoDir}/}";

        if [ ${bdir} != "${archiveDir}" ] \
        && [ ! -d "${bdir}" ]; # backup category dir is set and does not exist in ${archiveDir}
        then
            iecho "MKDR backup category: ${bdir##${archiveDir}/}";
            mkdir -p "${bdir}";
        fi;

        if [ -f "${bfile}" ]; # if backup exists
        then
            # eecho "SKIP reason: already exists, won't overwrite";
            # ((skippedRepos++));
            #
            # overwrite old backup with new
            iecho "REMV existing backup file";
            rm -f "${bfile}";
            #
            # # TODO: rename instead of remove??
            # mv "${bfile}" "${bfile%.tar.gz}.$(fmtdt).tar.gz";
        fi;

        tar -cpz \
            -f "${bfile}" \
            -C "${cdir}" \
            "${repo##${cdir}/}";
        if [[ "$?" -eq 0 ]];
        then
            ((doneRepos++));
            iecho "DONE";
        else
            ((failedRepos++));
            iecho "FAIL";
        fi;
        echo; # spacer
    done;
}

# if not sourcing, run backup
[[ "$0" == "$BASH_SOURCE" ]] && runBackup $@;
