#!/usr/bin/with-contenv bash
set -e

vecho () { if [ "${S6_VERBOSITY:-1}" -gt 0 ]; then echo "[$0] $@"; fi; }
usercmd () { if [ "X${EUID}" != "X0" ]; then ${1} "${@:2}"; else s6-setuidgid ${PUID:-1000}:${PGID:-1000} ${1} "${@:2}"; fi; }

S6_USER="${S6_USER:-git}"; # set in Dockerfile
S6_USERHOME="${S6_USERHOME:-$(getent passwd ${S6_USER} | cut -d: -f6)}";

SSHD_CONFDIR="${SSHD_CONFDIR:-/etc/ssh}";
mkdir -p "${SSHD_CONFDIR}";

_subst () {
    sed \
    -e "s|S6_USER|$S6_USER|g" \
    -e "s|SSHD_CONFDIR|$SSHD_CONFDIR|g" \
    $1 > $2;
}

# make sure configs exist
if [ ! -f "${SSHD_CONFDIR}/sshd_config" ];
then
    vecho "Ensure default SSHd configuration exists.";
    _subst /defaults/sshd_config ${SSHD_CONFDIR}/sshd_config;
fi;

# generate host keys, bind mount ${SSHD_CONFDIR} to somewhere local if you need to preserve them
if [ ! -f "${SSHD_CONFDIR}/ssh_host_rsa_key"  ];
then
    vecho "SSHd Generating host keys.";
    ssh-keygen -t rsa     -b 1024 -N "" -f "${SSHD_CONFDIR}/ssh_host_rsa_key";
    # openssh deprecated the default dsa key generation on 9.9
    # ssh-keygen -t dsa     -b 1024 -N "" -f "${SSHD_CONFDIR}/ssh_host_dsa_key";
    ssh-keygen -t ecdsa   -b 521  -N "" -f "${SSHD_CONFDIR}/ssh_host_ecdsa_key";
    ssh-keygen -t ed25519 -b 512  -N "" -f "${SSHD_CONFDIR}/ssh_host_ed25519_key";
fi;

# set sshd configuration from environment vars i.e. /run/s6/container_environment/SSHD__<varname>
if find /run/s6/container_environment/SSHD__* -maxdepth 1 > /dev/null 2>&1; then
    for FILENAME in /run/s6/container_environment/*;
    do
        if [[ "${FILENAME##*/}" == "SSHD__"* ]];
        then
            BASENAME="${FILENAME##*/}";
            VAR=${BASENAME//SSHD__/};
            VAL="$(cat ${FILENAME})";
            sed -i -e "s|^#\?${VAR} \?.*\$|$VAR $VAL|" "${SSHD_CONFDIR}/sshd_config";
            vecho "Set ${VAR} from ${BASENAME} in ${SSHD_CONFDIR}/sshd_config";
        fi;
    done;
fi;

mkdir -p "${S6_USERHOME}/.ssh";

if [ "X${EUID}" == "X0" ]; # requires root
then
    chown ${S6_USER}:${PGID:-1000} -R "${S6_USERHOME}/.ssh";
    chmod 700 "${S6_USERHOME}/.ssh";
fi;

# ensure user keypair exists
if [ ! -f "${S6_USERHOME}/.ssh/id_rsa" ];
then
    vecho "Generating user SSH keys for $S6_USER.";
    usercmd ssh-keygen -t rsa -b 1024 -N "" -C "${S6_USER}@${HOSTNAME}" -f "${S6_USERHOME}/.ssh/id_rsa";
    usercmd chmod 600 "${S6_USERHOME}/.ssh/id_rsa";
fi;

# if no authorized keys file provided, ensure user key exists in it
if [ ! -f "${S6_USERHOME}/.ssh/authorized_keys" ];
then
    vecho "Setting up authorized_keys for $S6_USER";
    usercmd cp "${S6_USERHOME}/.ssh/id_rsa.pub" "${S6_USERHOME}/.ssh/authorized_keys";
    usercmd chmod 600 "${S6_USERHOME}/.ssh/authorized_keys";
fi;
